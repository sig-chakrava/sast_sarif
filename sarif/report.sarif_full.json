{
    "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/main/sarif-2.1/schema/sarif-schema-2.1.0.json",
    "runs": [
        {
            "tool": {
                "driver": {
                    "name": "Polaris",
                    "organization": "Black Duck",
                    "rules": [
                        {
                            "id": "deadcode:logical_contradiction|javascript",
                            "shortDescription": {
                                "text": "Unreachable, Unused or Dead Code"
                            },
                            "fullDescription": {
                                "text": "Code can never be reached because of a logical contradiction"
                            },
                            "help": {
                                "markdown": "\n## Description\nCode can never be reached because of a logical contradiction\n\n[Click Here To See More Details in Polaris](https://pim.dev.polaris.blackduck.com/portfolio/portfolios/c8003202-7753-40f9-9125-7a4fb82fa1cb/portfolio-items/7c83cf52-32e1-4e9c-9421-4841b947fb55/projects/ca44c961-5c06-4254-a5bb-0a812c391cda/issues?branchId=b62d4097-a954-474a-95c0-085b6b0c9a1a&filter=issueType%3Alocalized-name%3DUnreachable%252C%20Unused%20or%20Dead%20Code%26context%3AtoolType%3Dsast)\n\n## Local Effect\n\nThe indicated dead code may have performed some action; that action will never occur.\n\n\n## Remediation\nUnreachable and dead code should be analyzed and either removed or corrected depending on whether it is needed. If the code should execute but doesn't, any bugs preventing the code from executing must be fixed. If the code is not needed, and its removal will not have a negative impact on the application, it should be removed.\n\n## References\n* Common Weakness Enumeration: [CWE-561](https://cwe.mitre.org/data/definitions/561.html)\n\n",
                                "text": "Code can never be reached because of a logical contradiction"
                            },
                            "properties": {
                                "security-severity": "6.8",
                                "tags": [
                                    "security",
                                    "static_analysis",
                                    "external/cwe/cwe-561"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "warning"
                            }
                        },
                        {
                            "id": "sigma.container_filesystem_write:docker_compose|text",
                            "shortDescription": {
                                "text": "Files or Directories Accessible to External Parties"
                            },
                            "fullDescription": {
                                "text": "The docker service container is configured to permit writing to the root filesystem. This makes some security attack vectors such as privilege escalation, denial-of-service or authorization bypass possible since the container instance's filesystem can be tampered with."
                            },
                            "help": {
                                "markdown": "\n## Description\nThe docker service container is configured to permit writing to the root filesystem. This makes some security attack vectors such as privilege escalation, denial-of-service or authorization bypass possible since the container instance's filesystem can be tampered with.\n\n[Click Here To See More Details in Polaris](https://pim.dev.polaris.blackduck.com/portfolio/portfolios/c8003202-7753-40f9-9125-7a4fb82fa1cb/portfolio-items/7c83cf52-32e1-4e9c-9421-4841b947fb55/projects/ca44c961-5c06-4254-a5bb-0a812c391cda/issues?branchId=b62d4097-a954-474a-95c0-085b6b0c9a1a&filter=issueType%3Alocalized-name%3DFiles%20or%20Directories%20Accessible%20to%20External%20Parties%26context%3AtoolType%3Dsast)\n\n\n\n## Remediation\nUnspecified remediation.\n\n## References\n* Common Weakness Enumeration: [CWE-552](https://cwe.mitre.org/data/definitions/552.html)\n\n",
                                "text": "The docker service container is configured to permit writing to the root filesystem. This makes some security attack vectors such as privilege escalation, denial-of-service or authorization bypass possible since the container instance's filesystem can be tampered with."
                            },
                            "properties": {
                                "security-severity": "3.8",
                                "tags": [
                                    "security",
                                    "static_analysis",
                                    "external/cwe/cwe-552"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "note"
                            }
                        },
                        {
                            "id": "sigma.container_privilege_escalation_allowed:docker_compose|text",
                            "shortDescription": {
                                "text": "Improper Privilege Management"
                            },
                            "fullDescription": {
                                "text": "The Docker Compose file sets the `no-new-privileges` attribute to `false` or omits it as the default value is `false`. This doesn't restrict the container from acquiring additional privileges via SUID or SGID bits. This allows privilege escalation, meaning a user can set the security context of the container and can perform root-level operations."
                            },
                            "help": {
                                "markdown": "\n## Description\nThe Docker Compose file sets the `no-new-privileges` attribute to `false` or omits it as the default value is `false`. This doesn't restrict the container from acquiring additional privileges via SUID or SGID bits. This allows privilege escalation, meaning a user can set the security context of the container and can perform root-level operations.\n\n[Click Here To See More Details in Polaris](https://pim.dev.polaris.blackduck.com/portfolio/portfolios/c8003202-7753-40f9-9125-7a4fb82fa1cb/portfolio-items/7c83cf52-32e1-4e9c-9421-4841b947fb55/projects/ca44c961-5c06-4254-a5bb-0a812c391cda/issues?branchId=b62d4097-a954-474a-95c0-085b6b0c9a1a&filter=issueType%3Alocalized-name%3DImproper%20Privilege%20Management%26context%3AtoolType%3Dsast)\n\n\n\n## Remediation\nPotential mitigations include the following:\n  1. Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.\n  2. Follow the principle of least privilege when assigning access rights to entities in a software system.\n  3. Consider following the principle of separation of privilege. Require multiple conditions to be met before permitting access to a system resource.\n\n## References\n* Common Weakness Enumeration: [CWE-269](https://cwe.mitre.org/data/definitions/269.html)\n\n",
                                "text": "The Docker Compose file sets the `no-new-privileges` attribute to `false` or omits it as the default value is `false`. This doesn't restrict the container from acquiring additional privileges via SUID or SGID bits. This allows privilege escalation, meaning a user can set the security context of the container and can perform root-level operations."
                            },
                            "properties": {
                                "security-severity": "3.8",
                                "tags": [
                                    "security",
                                    "static_analysis",
                                    "external/cwe/cwe-269"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "note"
                            }
                        },
                        {
                            "id": "sigma.container_requesting_net_raw:docker_compose|text",
                            "shortDescription": {
                                "text": "Improper Privilege Management"
                            },
                            "fullDescription": {
                                "text": "The Docker container requests the `NET_RAW` capability, either explicitly or by default, granting access to the host's network interfaces."
                            },
                            "help": {
                                "markdown": "\n## Description\nThe Docker container requests the `NET_RAW` capability, either explicitly or by default, granting access to the host's network interfaces.\n\n[Click Here To See More Details in Polaris](https://pim.dev.polaris.blackduck.com/portfolio/portfolios/c8003202-7753-40f9-9125-7a4fb82fa1cb/portfolio-items/7c83cf52-32e1-4e9c-9421-4841b947fb55/projects/ca44c961-5c06-4254-a5bb-0a812c391cda/issues?branchId=b62d4097-a954-474a-95c0-085b6b0c9a1a&filter=issueType%3Alocalized-name%3DImproper%20Privilege%20Management%26context%3AtoolType%3Dsast)\n\n\n\n## Remediation\nPotential mitigations include the following:\n  1. Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.\n  2. Follow the principle of least privilege when assigning access rights to entities in a software system.\n  3. Consider following the principle of separation of privilege. Require multiple conditions to be met before permitting access to a system resource.\n\n## References\n* Common Weakness Enumeration: [CWE-269](https://cwe.mitre.org/data/definitions/269.html)\n\n",
                                "text": "The Docker container requests the `NET_RAW` capability, either explicitly or by default, granting access to the host's network interfaces."
                            },
                            "properties": {
                                "security-severity": "8.9",
                                "tags": [
                                    "security",
                                    "static_analysis",
                                    "external/cwe/cwe-269"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "error"
                            }
                        },
                        {
                            "id": "sigma.expression_escaping_disabled:swig|javascript",
                            "shortDescription": {
                                "text": "Improper Encoding or Escaping of Output"
                            },
                            "fullDescription": {
                                "text": "Setting the `autoescape` attribute to `false` disables the escaping mechanism of the Swig template engine. This may lead to XSS attack if untrusted data is not properly validated and escaped."
                            },
                            "help": {
                                "markdown": "\n## Description\nSetting the `autoescape` attribute to `false` disables the escaping mechanism of the Swig template engine. This may lead to XSS attack if untrusted data is not properly validated and escaped.\n\n[Click Here To See More Details in Polaris](https://pim.dev.polaris.blackduck.com/portfolio/portfolios/c8003202-7753-40f9-9125-7a4fb82fa1cb/portfolio-items/7c83cf52-32e1-4e9c-9421-4841b947fb55/projects/ca44c961-5c06-4254-a5bb-0a812c391cda/issues?branchId=b62d4097-a954-474a-95c0-085b6b0c9a1a&filter=issueType%3Alocalized-name%3DImproper%20Encoding%20or%20Escaping%20of%20Output%26context%3AtoolType%3Dsast)\n\n\n\n## Remediation\nPotential mitigations include the following:\n  1. Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.\n\nFor example, consider using the ESAPI Encoding control [REF-45] or a similar tool, library, or framework. These will help the programmer encode outputs in a manner less prone to error.\n\nAlternately, use built-in functions, but consider using wrappers in case those functions are discovered to have a vulnerability.\n\n  2. If available, use structured mechanisms that automatically enforce the separation between data and code. These mechanisms may be able to provide the relevant quoting, encoding, and validation automatically, instead of relying on the developer to provide this capability at every point where output is generated.\n\nFor example, stored procedures can enforce database query structure and reduce the likelihood of SQL injection.\n\n  3. Understand the context in which your data will be used and the encoding that will be expected. This is especially important when transmitting data between different components, or when generating outputs that can contain multiple encodings at the same time, such as web pages or multi-part mail messages. Study all expected communication protocols and data representations to determine the required encoding strategies.\n  4. In some cases, input validation may be an important strategy when output encoding is not a complete solution. For example, you may be providing the same output that will be processed by multiple consumers that use different encodings or representations. In other cases, you may be required to allow user-supplied input to contain control information, such as limited HTML tags that support formatting in a wiki or bulletin board. When this type of requirement must be met, use an extremely strict allowlist to limit which control sequences can be used. Verify that the resulting syntactic structure is what you expect. Use your normal encoding methods for the remainder of the input.\n  5. Use input validation as a defense-in-depth measure to reduce the likelihood of output encoding errors (see CWE-20).\n  6. Fully specify which encodings are required by components that will be communicating with each other.\n  7. When exchanging data between components, ensure that both components are using the same character encoding. Ensure that the proper encoding is applied at each interface. Explicitly set the encoding you are using whenever the protocol allows you to do so.\n\n## References\n* Common Weakness Enumeration: [CWE-116](https://cwe.mitre.org/data/definitions/116.html)\n\n",
                                "text": "Setting the `autoescape` attribute to `false` disables the escaping mechanism of the Swig template engine. This may lead to XSS attack if untrusted data is not properly validated and escaped."
                            },
                            "properties": {
                                "security-severity": "6.8",
                                "tags": [
                                    "security",
                                    "static_analysis",
                                    "external/cwe/cwe-116"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "warning"
                            }
                        },
                        {
                            "id": "sigma.hardcoded_secret:pattern_low|javascript",
                            "shortDescription": {
                                "text": "Use of Hard-coded Credentials"
                            },
                            "fullDescription": {
                                "text": "A secret, such as a password, cryptographic key, or token is stored in plaintext directly in the source code, in an application's properties, or configuration file. Users with access to the secret may then use the secret to access resources that they otherwise would not have access to."
                            },
                            "help": {
                                "markdown": "\n## Description\nA secret, such as a password, cryptographic key, or token is stored in plaintext directly in the source code, in an application's properties, or configuration file. Users with access to the secret may then use the secret to access resources that they otherwise would not have access to.\n\n[Click Here To See More Details in Polaris](https://pim.dev.polaris.blackduck.com/portfolio/portfolios/c8003202-7753-40f9-9125-7a4fb82fa1cb/portfolio-items/7c83cf52-32e1-4e9c-9421-4841b947fb55/projects/ca44c961-5c06-4254-a5bb-0a812c391cda/issues?branchId=b62d4097-a954-474a-95c0-085b6b0c9a1a&filter=issueType%3Alocalized-name%3DUse%20of%20Hard-coded%20Credentials%26context%3AtoolType%3Dsast)\n\n\n\n## Remediation\nPotential mitigations include the following:\n  1. For outbound authentication: store passwords, keys, and other credentials outside of the code in a strongly-protected, encrypted configuration file or database that is protected from access by all outsiders, including other local users on the same system. Properly protect the key (CWE-320). If you cannot use encryption to protect the file, then make sure that the permissions are as restrictive as possible [REF-7].\n\nIn Windows environments, the Encrypted File System (EFS) may provide some protection.\n\n  2. For inbound authentication: Rather than hard-code a default username and password, key, or other authentication credentials for first time logins, utilize a \"first login\" mode that requires the user to enter a unique strong password or key.\n  3. If the software must contain hard-coded credentials or they cannot be removed, perform access control checks and limit which entities can access the feature that requires the hard-coded credentials. For example, a feature might only be enabled through the system console instead of through a network connection.\n  4. For inbound authentication using passwords: apply strong one-way hashes to passwords and store those hashes in a configuration file or database with appropriate access control. That way, theft of the file/database still requires the attacker to try to crack the password. When handling an incoming password during authentication, take the hash of the password and compare it to the saved hash.\n\nUse randomly assigned salts for each separate hash that is generated. This increases the amount of computation that an attacker needs to conduct a brute-force attack, possibly limiting the effectiveness of the rainbow table method.\n\n  5. For front-end to back-end connections: Three solutions are possible, although none are complete.\n\n    * The first suggestion involves the use of generated passwords or keys that are changed automatically and must be entered at given time intervals by a system administrator. These passwords will be held in memory and only be valid for the time intervals.\n    * Next, the passwords or keys should be limited at the back end to only performing actions valid for the front end, as opposed to having full access.\n    * Finally, the messages sent should be tagged and checksummed with time sensitive values so as to prevent replay-style attacks.\n\n## References\n* Common Weakness Enumeration: [CWE-798](https://cwe.mitre.org/data/definitions/798.html)\n\n",
                                "text": "A secret, such as a password, cryptographic key, or token is stored in plaintext directly in the source code, in an application's properties, or configuration file. Users with access to the secret may then use the secret to access resources that they otherwise would not have access to."
                            },
                            "properties": {
                                "security-severity": "3.8",
                                "tags": [
                                    "security",
                                    "static_analysis",
                                    "external/cwe/cwe-798"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "note"
                            }
                        },
                        {
                            "id": "sigma.hardcoded_secret:pattern_low|text",
                            "shortDescription": {
                                "text": "Use of Hard-coded Credentials"
                            },
                            "fullDescription": {
                                "text": "A secret, such as a password, cryptographic key, or token is stored in plaintext directly in the source code, in an application's properties, or configuration file. Users with access to the secret may then use the secret to access resources that they otherwise would not have access to."
                            },
                            "help": {
                                "markdown": "\n## Description\nA secret, such as a password, cryptographic key, or token is stored in plaintext directly in the source code, in an application's properties, or configuration file. Users with access to the secret may then use the secret to access resources that they otherwise would not have access to.\n\n[Click Here To See More Details in Polaris](https://pim.dev.polaris.blackduck.com/portfolio/portfolios/c8003202-7753-40f9-9125-7a4fb82fa1cb/portfolio-items/7c83cf52-32e1-4e9c-9421-4841b947fb55/projects/ca44c961-5c06-4254-a5bb-0a812c391cda/issues?branchId=b62d4097-a954-474a-95c0-085b6b0c9a1a&filter=issueType%3Alocalized-name%3DUse%20of%20Hard-coded%20Credentials%26context%3AtoolType%3Dsast)\n\n\n\n## Remediation\nPotential mitigations include the following:\n  1. For outbound authentication: store passwords, keys, and other credentials outside of the code in a strongly-protected, encrypted configuration file or database that is protected from access by all outsiders, including other local users on the same system. Properly protect the key (CWE-320). If you cannot use encryption to protect the file, then make sure that the permissions are as restrictive as possible [REF-7].\n\nIn Windows environments, the Encrypted File System (EFS) may provide some protection.\n\n  2. For inbound authentication: Rather than hard-code a default username and password, key, or other authentication credentials for first time logins, utilize a \"first login\" mode that requires the user to enter a unique strong password or key.\n  3. If the software must contain hard-coded credentials or they cannot be removed, perform access control checks and limit which entities can access the feature that requires the hard-coded credentials. For example, a feature might only be enabled through the system console instead of through a network connection.\n  4. For inbound authentication using passwords: apply strong one-way hashes to passwords and store those hashes in a configuration file or database with appropriate access control. That way, theft of the file/database still requires the attacker to try to crack the password. When handling an incoming password during authentication, take the hash of the password and compare it to the saved hash.\n\nUse randomly assigned salts for each separate hash that is generated. This increases the amount of computation that an attacker needs to conduct a brute-force attack, possibly limiting the effectiveness of the rainbow table method.\n\n  5. For front-end to back-end connections: Three solutions are possible, although none are complete.\n\n    * The first suggestion involves the use of generated passwords or keys that are changed automatically and must be entered at given time intervals by a system administrator. These passwords will be held in memory and only be valid for the time intervals.\n    * Next, the passwords or keys should be limited at the back end to only performing actions valid for the front end, as opposed to having full access.\n    * Finally, the messages sent should be tagged and checksummed with time sensitive values so as to prevent replay-style attacks.\n\n## References\n* Common Weakness Enumeration: [CWE-798](https://cwe.mitre.org/data/definitions/798.html)\n\n",
                                "text": "A secret, such as a password, cryptographic key, or token is stored in plaintext directly in the source code, in an application's properties, or configuration file. Users with access to the secret may then use the secret to access resources that they otherwise would not have access to."
                            },
                            "properties": {
                                "security-severity": "3.8",
                                "tags": [
                                    "security",
                                    "static_analysis",
                                    "external/cwe/cwe-798"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "note"
                            }
                        },
                        {
                            "id": "sigma.least_privilege_violation:docker_compose|text",
                            "shortDescription": {
                                "text": "Improper Access Control"
                            },
                            "fullDescription": {
                                "text": "The Docker container is not configured to drop all default capabilities and then add only required one. Thus the container may be granted excessive privileges which violate the least privilege principle."
                            },
                            "help": {
                                "markdown": "\n## Description\nThe Docker container is not configured to drop all default capabilities and then add only required one. Thus the container may be granted excessive privileges which violate the least privilege principle.\n\n[Click Here To See More Details in Polaris](https://pim.dev.polaris.blackduck.com/portfolio/portfolios/c8003202-7753-40f9-9125-7a4fb82fa1cb/portfolio-items/7c83cf52-32e1-4e9c-9421-4841b947fb55/projects/ca44c961-5c06-4254-a5bb-0a812c391cda/issues?branchId=b62d4097-a954-474a-95c0-085b6b0c9a1a&filter=issueType%3Alocalized-name%3DImproper%20Access%20Control%26context%3AtoolType%3Dsast)\n\n\n\n## Remediation\nPotential mitigations include the following:\n  1. Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.\n  2. Compartmentalize the system to have \"safe\" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area.\n\nEnsure that appropriate compartmentalization is built into the system design, and the compartmentalization allows for and reinforces privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide the appropriate time to use privileges and the time to drop privileges.\n\n## References\n* Common Weakness Enumeration: [CWE-284](https://cwe.mitre.org/data/definitions/284.html)\n\n",
                                "text": "The Docker container is not configured to drop all default capabilities and then add only required one. Thus the container may be granted excessive privileges which violate the least privilege principle."
                            },
                            "properties": {
                                "security-severity": "3.8",
                                "tags": [
                                    "security",
                                    "static_analysis",
                                    "external/cwe/cwe-284"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "note"
                            }
                        },
                        {
                            "id": "sigma.missing_iframe_sandbox:html|html",
                            "shortDescription": {
                                "text": "Inclusion of Functionality from Untrusted Control Sphere"
                            },
                            "fullDescription": {
                                "text": "The `sandbox` attribute of an `iframe` is not set in HTML. This iframe loads content from a third-party site. If the JavaScript in that iframe is malicious or was compromised, an attacker can break out of the iframe, access the DOM of the main page, and mount a clickjacking or a phishing attack."
                            },
                            "help": {
                                "markdown": "\n## Description\nThe `sandbox` attribute of an `iframe` is not set in HTML. This iframe loads content from a third-party site. If the JavaScript in that iframe is malicious or was compromised, an attacker can break out of the iframe, access the DOM of the main page, and mount a clickjacking or a phishing attack.\n\n[Click Here To See More Details in Polaris](https://pim.dev.polaris.blackduck.com/portfolio/portfolios/c8003202-7753-40f9-9125-7a4fb82fa1cb/portfolio-items/7c83cf52-32e1-4e9c-9421-4841b947fb55/projects/ca44c961-5c06-4254-a5bb-0a812c391cda/issues?branchId=b62d4097-a954-474a-95c0-085b6b0c9a1a&filter=issueType%3Alocalized-name%3DInclusion%20of%20Functionality%20from%20Untrusted%20Control%20Sphere%26context%3AtoolType%3Dsast)\n\n\n\n## Remediation\nPotential mitigations include the following:\n  1. Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.\n  2. When the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs.\n\nFor example, ID 1 could map to \"inbox.txt\" and ID 2 could map to \"profile.txt\". Features such as the ESAPI AccessReferenceMap [REF-45] provide this capability.\n\n  3. For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.\n  4. Run the code in a \"jail\" or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict which files can be accessed in a particular directory or which commands can be executed by the software.\n\nOS-level examples include the Unix chroot jail, AppArmor, and SELinux. In general, managed code may provide some protection. For example, java.io.FilePermission in the Java SecurityManager allows the software to specify restrictions on file operations.\n\nThis may not be a feasible solution, and it only limits the impact to the operating system; the rest of the application may still be subject to compromise.\n\nBe careful to avoid CWE-243 and other weaknesses related to jails.\n\n  5. Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.\n  6. Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.\n\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"\n\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\n\nWhen validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as \"/\" to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434.\n\nDo not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering \"/\" is insufficient protection if the filesystem also supports the use of \"\\\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if \"../\" sequences are removed from the \".../...//\" string in a sequential fashion, two instances of \"../\" would be removed from the original string, but the remaining characters would still form the \"../\" string.\n\n  7. Store library, include, and utility files outside of the web document root, if possible. Otherwise, store them in a separate directory and use the web server's access control capabilities to prevent attackers from directly requesting them. One common practice is to define a fixed constant in each calling program, then check for the existence of the constant in the library/include file; if the constant does not exist, then the file was directly requested, and it can exit immediately.\n\nThis significantly reduces the chance of an attacker being able to bypass any protection mechanisms that are in the base program but not in the include files. It will also reduce the attack surface.\n\n  8. Understand all the potential areas where untrusted inputs can enter your software: parameters or arguments, cookies, anything read from the network, environment variables, reverse DNS lookups, query results, request headers, URL components, e-mail, files, filenames, databases, and any external systems that provide data to the application. Remember that such inputs may be obtained indirectly through API calls.\n\nMany file inclusion problems occur because the programmer assumed that certain inputs could not be modified, especially for cookies and URL components.\n\n  9. Use an application firewall that can detect attacks against this weakness. It can be beneficial in cases in which the code cannot be fixed (because it is controlled by a third party), as an emergency prevention measure while more comprehensive software assurance measures are applied, or to provide defense in depth.\n\n## References\n* Common Weakness Enumeration: [CWE-829](https://cwe.mitre.org/data/definitions/829.html)\n\n",
                                "text": "The `sandbox` attribute of an `iframe` is not set in HTML. This iframe loads content from a third-party site. If the JavaScript in that iframe is malicious or was compromised, an attacker can break out of the iframe, access the DOM of the main page, and mount a clickjacking or a phishing attack."
                            },
                            "properties": {
                                "security-severity": "6.8",
                                "tags": [
                                    "security",
                                    "static_analysis",
                                    "external/cwe/cwe-829"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "warning"
                            }
                        },
                        {
                            "id": "sigma.missing_samesite_attribute_session_cookie:express|javascript",
                            "shortDescription": {
                                "text": "Sensitive Cookie with Improper SameSite Attribute"
                            },
                            "fullDescription": {
                                "text": "The `cookie.sameSite` option is either undefined or set to the insecure value `none` or `false`. In all three cases, the cookie's `SameSite` attribute protections are disabled, allowing the browser to send cookies in cross-site requests. An attacker can abuse this missing protection to facilitate cross-site request forgery (CSRF) attacks."
                            },
                            "help": {
                                "markdown": "\n## Description\nThe `cookie.sameSite` option is either undefined or set to the insecure value `none` or `false`. In all three cases, the cookie's `SameSite` attribute protections are disabled, allowing the browser to send cookies in cross-site requests. An attacker can abuse this missing protection to facilitate cross-site request forgery (CSRF) attacks.\n\n[Click Here To See More Details in Polaris](https://pim.dev.polaris.blackduck.com/portfolio/portfolios/c8003202-7753-40f9-9125-7a4fb82fa1cb/portfolio-items/7c83cf52-32e1-4e9c-9421-4841b947fb55/projects/ca44c961-5c06-4254-a5bb-0a812c391cda/issues?branchId=b62d4097-a954-474a-95c0-085b6b0c9a1a&filter=issueType%3Alocalized-name%3DSensitive%20Cookie%20with%20Improper%20SameSite%20Attribute%26context%3AtoolType%3Dsast)\n\n\n\n## Remediation\nThe server should explicitly set the SameSite attribute for all cookies containing sensitive data, such as session tokens. This can be accomplished either programmatically when setting Set-Cookie headers in responses or via deployment descriptors provided by various frameworks.\n\nThe setting \"SameSite=Strict\" provides the strongest protection against CSRF but the user experience works best when an application uses two different cookies, one for write-access that is locked down with \"SameSite=Strict\" and another for read-access that can have a more permissive setting, e.g., \"SameSite=Lax\". If the application only relies on one cookie for both read & write access, then the setting \"SameSite=Lax\" provides some protection against CSRF without too much negative impact on user experience. \n\nIt's worth noting that the definition of same-site is less restrictive than the definition of cross-origin, e.g., requests from other sub-domains are considered same-site although they are from a different origin. This means that even in browsers that fully support the \"SameSite\" cookie attribute, an attacker may still circumvent this protection if they can take over a subdomain or inject HTML or JavaScript into any subdomain of the same site. Therefore, relying on the \"SameSite\" attribute is not recommended as the sole defense against cross-site request forgery, it should instead be seen as a defense in depth mechanism that reduces the likelihood of CSRF.\n\n## References\n* Common Weakness Enumeration: [CWE-1275](https://cwe.mitre.org/data/definitions/1275.html)\n\n",
                                "text": "The `cookie.sameSite` option is either undefined or set to the insecure value `none` or `false`. In all three cases, the cookie's `SameSite` attribute protections are disabled, allowing the browser to send cookies in cross-site requests. An attacker can abuse this missing protection to facilitate cross-site request forgery (CSRF) attacks."
                            },
                            "properties": {
                                "security-severity": "3.8",
                                "tags": [
                                    "security",
                                    "static_analysis",
                                    "external/cwe/cwe-1275"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "note"
                            }
                        },
                        {
                            "id": "sigma.missing_secure_attribute_session_cookie:express|javascript",
                            "shortDescription": {
                                "text": "Secure Cookie Attribute Not Set"
                            },
                            "fullDescription": {
                                "text": "The configuration of the `client-sessions`, `cookie-session` or `express-session` library does not set the `secure` attribute of the session cookie. While web browsers send cookies with the `secure` attribute only over HTTPS, they do send cookies without it over HTTP. If an attacker can fool the victim's browser into sending an HTTP request to the vulnerable site (for example, with JavaScript code on a malicious page or with a phishing link), the victim's browser will send the vulnerable cookie in clear text. If the attacker can also intercept this network traffic, then they can steal the victim's session cookie and impersonate the victim."
                            },
                            "help": {
                                "markdown": "\n## Description\nThe configuration of the `client-sessions`, `cookie-session` or `express-session` library does not set the `secure` attribute of the session cookie. While web browsers send cookies with the `secure` attribute only over HTTPS, they do send cookies without it over HTTP. If an attacker can fool the victim's browser into sending an HTTP request to the vulnerable site (for example, with JavaScript code on a malicious page or with a phishing link), the victim's browser will send the vulnerable cookie in clear text. If the attacker can also intercept this network traffic, then they can steal the victim's session cookie and impersonate the victim.\n\n[Click Here To See More Details in Polaris](https://pim.dev.polaris.blackduck.com/portfolio/portfolios/c8003202-7753-40f9-9125-7a4fb82fa1cb/portfolio-items/7c83cf52-32e1-4e9c-9421-4841b947fb55/projects/ca44c961-5c06-4254-a5bb-0a812c391cda/issues?branchId=b62d4097-a954-474a-95c0-085b6b0c9a1a&filter=issueType%3Alocalized-name%3DSecure%20Cookie%20Attribute%20Not%20Set%26context%3AtoolType%3Dsast)\n\n\n\n## Remediation\nSet the 'Secure' attribute should on all cookies that contain sensitive data, especially those containing session IDs. The mitigation details depend on the application server, with some requiring programmatic configuration, where others can be configured through an administration interface. \n\nIf not already done, consider deploying HTTP Strict Transport Security (HSTS) headers to minimize the risk of plain-text HTTP requests to the application server.\n\n## References\n* Common Weakness Enumeration: [CWE-614](https://cwe.mitre.org/data/definitions/614.html)\n\n",
                                "text": "The configuration of the `client-sessions`, `cookie-session` or `express-session` library does not set the `secure` attribute of the session cookie. While web browsers send cookies with the `secure` attribute only over HTTPS, they do send cookies without it over HTTP. If an attacker can fool the victim's browser into sending an HTTP request to the vulnerable site (for example, with JavaScript code on a malicious page or with a phishing link), the victim's browser will send the vulnerable cookie in clear text. If the attacker can also intercept this network traffic, then they can steal the victim's session cookie and impersonate the victim."
                            },
                            "properties": {
                                "security-severity": "3.8",
                                "tags": [
                                    "security",
                                    "static_analysis",
                                    "external/cwe/cwe-614"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "note"
                            }
                        },
                        {
                            "id": "sigma.missing_tls:node_http_server|javascript",
                            "shortDescription": {
                                "text": "Cleartext Transmission of Sensitive Information"
                            },
                            "fullDescription": {
                                "text": "A web server is created using the insecure `HTTP` scheme. As a result, application data is transmitted over an insecure channel where it can be read and modified by attackers."
                            },
                            "help": {
                                "markdown": "\n## Description\nA web server is created using the insecure `HTTP` scheme. As a result, application data is transmitted over an insecure channel where it can be read and modified by attackers.\n\n[Click Here To See More Details in Polaris](https://pim.dev.polaris.blackduck.com/portfolio/portfolios/c8003202-7753-40f9-9125-7a4fb82fa1cb/portfolio-items/7c83cf52-32e1-4e9c-9421-4841b947fb55/projects/ca44c961-5c06-4254-a5bb-0a812c391cda/issues?branchId=b62d4097-a954-474a-95c0-085b6b0c9a1a&filter=issueType%3Alocalized-name%3DCleartext%20Transmission%20of%20Sensitive%20Information%26context%3AtoolType%3Dsast)\n\n\n\n## Remediation\nPotential mitigations include the following:\n  1. Encrypt the data with a reliable encryption scheme before transmitting.\n  2. When using web applications with SSL, use SSL for the entire session from login to logout, not just for the initial login page.\n  3. Use tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session. These may be more effective than strictly automated techniques. This is especially the case with weaknesses that are related to design and business rules.\n  4. Configure servers to use encrypted channels for communication, which may include SSL or other secure protocols.\n\n## References\n* Common Weakness Enumeration: [CWE-319](https://cwe.mitre.org/data/definitions/319.html)\n\n",
                                "text": "A web server is created using the insecure `HTTP` scheme. As a result, application data is transmitted over an insecure channel where it can be read and modified by attackers."
                            },
                            "properties": {
                                "security-severity": "3.8",
                                "tags": [
                                    "security",
                                    "static_analysis",
                                    "external/cwe/cwe-319"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "note"
                            }
                        },
                        {
                            "id": "sigma.reverse_tabnabbing:html|html",
                            "shortDescription": {
                                "text": "Insecure Link Target"
                            },
                            "fullDescription": {
                                "text": "The application uses an anchor tag whose `target` attribute is set to `_blank`, but the `rel` attribute is not set with the `noopener` value. The page opened from that target link may have the access to the `location` object of the original page through `window.opener.location`. A malicious page associated with this link will be able to navigate the original page to an arbitrary site, such as a phishing site, and thus, execute a reverse tabnabbing attack.\nNote that most contemporary browsers add the `noopener` value to the `rel` automatically by default. Thus, only users with older versions of browsers are targets for this phishing attack."
                            },
                            "help": {
                                "markdown": "\n## Description\nThe application uses an anchor tag whose `target` attribute is set to `_blank`, but the `rel` attribute is not set with the `noopener` value. The page opened from that target link may have the access to the `location` object of the original page through `window.opener.location`. A malicious page associated with this link will be able to navigate the original page to an arbitrary site, such as a phishing site, and thus, execute a reverse tabnabbing attack.\nNote that most contemporary browsers add the `noopener` value to the `rel` automatically by default. Thus, only users with older versions of browsers are targets for this phishing attack.\n\n[Click Here To See More Details in Polaris](https://pim.dev.polaris.blackduck.com/portfolio/portfolios/c8003202-7753-40f9-9125-7a4fb82fa1cb/portfolio-items/7c83cf52-32e1-4e9c-9421-4841b947fb55/projects/ca44c961-5c06-4254-a5bb-0a812c391cda/issues?branchId=b62d4097-a954-474a-95c0-085b6b0c9a1a&filter=issueType%3Alocalized-name%3DInsecure%20Link%20Target%26context%3AtoolType%3Dsast)\n\n\n\n## Remediation\nTo prevent untrusted pages linked from the application from being able to manipulate the \"window.opener\" object, set the attribute rel=\"noopener noreferrer\" for each HTML link to external sites. In addition to preventing reverse tabnabbing attacks, it may also improve browser performance as the new page can be run in a separate process.\n\nWhen the rel attribute is set to \"noopener\", the \"window.opener\" object is \"null\" on the new page. Therefore, the attacker cannot manipulate the navigation of the original page.  Additionally, the \"noreferrer\" attribute tells the browser to not include referrer information when the new page is requested.\n\nFor links opened with JavaScript, add the values \"noopener\", \"noreferrer\" as the \"windowFeatures\" parameter in the \"window.open()\" function:\n```\nvar childWindow = window.open(url, name, \"noopener,noreferrer\");   \n```\nFor legacy browser support, you can also manually set the opener to \"null\":\n```\nchildWindow.opener = null;  \n```\n\n**Note**: The rel=\"noopener\" attribute setting is supported by most modern browsers such as Firefox, Chrome, Edge and Safari but is not supported by legacy browsers such as Internet Explorer. For the latest information on browser support, refer to https://caniuse.com/#search=rel.\n\n## References\n* Common Weakness Enumeration: [CWE-1022](https://cwe.mitre.org/data/definitions/1022.html)\n\n",
                                "text": "The application uses an anchor tag whose `target` attribute is set to `_blank`, but the `rel` attribute is not set with the `noopener` value. The page opened from that target link may have the access to the `location` object of the original page through `window.opener.location`. A malicious page associated with this link will be able to navigate the original page to an arbitrary site, such as a phishing site, and thus, execute a reverse tabnabbing attack.\nNote that most contemporary browsers add the `noopener` value to the `rel` automatically by default. Thus, only users with older versions of browsers are targets for this phishing attack."
                            },
                            "properties": {
                                "security-severity": "3.8",
                                "tags": [
                                    "security",
                                    "static_analysis",
                                    "external/cwe/cwe-1022"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "note"
                            }
                        },
                        {
                            "id": "sigma.root_path_attribute_cookie:express|javascript",
                            "shortDescription": {
                                "text": "Exposure of Resource to Wrong Sphere"
                            },
                            "fullDescription": {
                                "text": "The `client-sessions`, `cookie-session` or `express-session` library sets the `path` attribute on the session cookie to the root or doesn't set `path` attribute (default value is root). If the application is hosted beneath a subdirectory and the cookie is copied to the root, then applications in other subdirectories will have access to this cookie. If any of these applications become compromised, the cookie of the victim site can be stolen from this application."
                            },
                            "help": {
                                "markdown": "\n## Description\nThe `client-sessions`, `cookie-session` or `express-session` library sets the `path` attribute on the session cookie to the root or doesn't set `path` attribute (default value is root). If the application is hosted beneath a subdirectory and the cookie is copied to the root, then applications in other subdirectories will have access to this cookie. If any of these applications become compromised, the cookie of the victim site can be stolen from this application.\n\n[Click Here To See More Details in Polaris](https://pim.dev.polaris.blackduck.com/portfolio/portfolios/c8003202-7753-40f9-9125-7a4fb82fa1cb/portfolio-items/7c83cf52-32e1-4e9c-9421-4841b947fb55/projects/ca44c961-5c06-4254-a5bb-0a812c391cda/issues?branchId=b62d4097-a954-474a-95c0-085b6b0c9a1a&filter=issueType%3Alocalized-name%3DExposure%20of%20Resource%20to%20Wrong%20Sphere%26context%3AtoolType%3Dsast)\n\n\n\n## Remediation\nUnspecified remediation.\n\n## References\n* Common Weakness Enumeration: [CWE-668](https://cwe.mitre.org/data/definitions/668.html)\n\n",
                                "text": "The `client-sessions`, `cookie-session` or `express-session` library sets the `path` attribute on the session cookie to the root or doesn't set `path` attribute (default value is root). If the application is hosted beneath a subdirectory and the cookie is copied to the root, then applications in other subdirectories will have access to this cookie. If any of these applications become compromised, the cookie of the victim site can be stolen from this application."
                            },
                            "properties": {
                                "security-severity": "3.8",
                                "tags": [
                                    "security",
                                    "static_analysis",
                                    "external/cwe/cwe-668"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "note"
                            }
                        },
                        {
                            "id": "sigma.unsafe_eval:core_javascript|javascript",
                            "shortDescription": {
                                "text": "Use of Potentially Dangerous Function"
                            },
                            "fullDescription": {
                                "text": "The application uses an unsafe evaluation method. If attacker-controlled code reaches this method, it may lead to remote code execution, code injection, or a cross-site scripting vulnerability."
                            },
                            "help": {
                                "markdown": "\n## Description\nThe application uses an unsafe evaluation method. If attacker-controlled code reaches this method, it may lead to remote code execution, code injection, or a cross-site scripting vulnerability.\n\n[Click Here To See More Details in Polaris](https://pim.dev.polaris.blackduck.com/portfolio/portfolios/c8003202-7753-40f9-9125-7a4fb82fa1cb/portfolio-items/7c83cf52-32e1-4e9c-9421-4841b947fb55/projects/ca44c961-5c06-4254-a5bb-0a812c391cda/issues?branchId=b62d4097-a954-474a-95c0-085b6b0c9a1a&filter=issueType%3Alocalized-name%3DUse%20of%20Potentially%20Dangerous%20Function%26context%3AtoolType%3Dsast)\n\n\n\n## Remediation\nPotential mitigations include the following:\n  1. Identify a list of prohibited API functions and prohibit developers from using these functions, providing safer alternatives. In some cases, automatic code analysis tools or the compiler can be instructed to spot use of prohibited functions, such as the \"banned.h\" include file from Microsoft's SDL. [REF-554] [REF-7]\n\n## References\n* Common Weakness Enumeration: [CWE-676](https://cwe.mitre.org/data/definitions/676.html)\n\n",
                                "text": "The application uses an unsafe evaluation method. If attacker-controlled code reaches this method, it may lead to remote code execution, code injection, or a cross-site scripting vulnerability."
                            },
                            "properties": {
                                "security-severity": "3.8",
                                "tags": [
                                    "security",
                                    "static_analysis",
                                    "external/cwe/cwe-676"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "note"
                            }
                        },
                        {
                            "id": "sigma.unsafe_session_storage:express_session|javascript",
                            "shortDescription": {
                                "text": "Insecure Storage of Sensitive Information"
                            },
                            "fullDescription": {
                                "text": "The session storage that the `express-session` module provides explicitly or by default is insecure. This type of memory storage leaks memory under most conditions. An attacker may create numerous active sessions and cause a Denial-of-Service situation."
                            },
                            "help": {
                                "markdown": "\n## Description\nThe session storage that the `express-session` module provides explicitly or by default is insecure. This type of memory storage leaks memory under most conditions. An attacker may create numerous active sessions and cause a Denial-of-Service situation.\n\n[Click Here To See More Details in Polaris](https://pim.dev.polaris.blackduck.com/portfolio/portfolios/c8003202-7753-40f9-9125-7a4fb82fa1cb/portfolio-items/7c83cf52-32e1-4e9c-9421-4841b947fb55/projects/ca44c961-5c06-4254-a5bb-0a812c391cda/issues?branchId=b62d4097-a954-474a-95c0-085b6b0c9a1a&filter=issueType%3Alocalized-name%3DInsecure%20Storage%20of%20Sensitive%20Information%26context%3AtoolType%3Dsast)\n\n\n\n## Remediation\nUnspecified remediation.\n\n## References\n* Common Weakness Enumeration: [CWE-922](https://cwe.mitre.org/data/definitions/922.html)\n\n",
                                "text": "The session storage that the `express-session` module provides explicitly or by default is insecure. This type of memory storage leaks memory under most conditions. An attacker may create numerous active sessions and cause a Denial-of-Service situation."
                            },
                            "properties": {
                                "security-severity": "6.8",
                                "tags": [
                                    "security",
                                    "static_analysis",
                                    "external/cwe/cwe-922"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "warning"
                            }
                        },
                        {
                            "id": "sigma.verbose_server_banner:express|javascript",
                            "shortDescription": {
                                "text": "Insertion of Sensitive Information Into Sent Data"
                            },
                            "fullDescription": {
                                "text": "HTTP responses contain an `X-Powered-By` header that reveals information about the server which helps attackers exploit known vulnerabilities or craft more targeted exploits."
                            },
                            "help": {
                                "markdown": "\n## Description\nHTTP responses contain an `X-Powered-By` header that reveals information about the server which helps attackers exploit known vulnerabilities or craft more targeted exploits.\n\n[Click Here To See More Details in Polaris](https://pim.dev.polaris.blackduck.com/portfolio/portfolios/c8003202-7753-40f9-9125-7a4fb82fa1cb/portfolio-items/7c83cf52-32e1-4e9c-9421-4841b947fb55/projects/ca44c961-5c06-4254-a5bb-0a812c391cda/issues?branchId=b62d4097-a954-474a-95c0-085b6b0c9a1a&filter=issueType%3Alocalized-name%3DInsertion%20of%20Sensitive%20Information%20Into%20Sent%20Data%26context%3AtoolType%3Dsast)\n\n\n\n## Remediation\nPotential mitigations include the following:\n  1. Specify which data in the software should be regarded as sensitive. Consider which types of users should have access to which types of data.\n  2. Ensure that any possibly sensitive data specified in the requirements is verified with designers to ensure that it is either a calculated risk or mitigated elsewhere. Any information that is not necessary to the functionality should be removed in order to lower both the overhead and the possibility of security sensitive data being sent.\n  3. Setup default error messages so that unexpected errors do not disclose sensitive information.\n  4. Compartmentalize the system to have \"safe\" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area.\n\nEnsure that appropriate compartmentalization is built into the system design, and the compartmentalization allows for and reinforces privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide the appropriate time to use privileges and the time to drop privileges.\n\n## References\n* Common Weakness Enumeration: [CWE-201](https://cwe.mitre.org/data/definitions/201.html)\n\n",
                                "text": "HTTP responses contain an `X-Powered-By` header that reveals information about the server which helps attackers exploit known vulnerabilities or craft more targeted exploits."
                            },
                            "properties": {
                                "security-severity": "3.8",
                                "tags": [
                                    "security",
                                    "static_analysis",
                                    "external/cwe/cwe-201"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "note"
                            }
                        }
                    ]
                }
            },
            "results": [
                {
                    "message": {
                        "text": "[\\[See in Polaris\\]](https://pim.dev.polaris.blackduck.com/portfolio/portfolios/c8003202-7753-40f9-9125-7a4fb82fa1cb/portfolio-items/7c83cf52-32e1-4e9c-9421-4841b947fb55/projects/ca44c961-5c06-4254-a5bb-0a812c391cda/issues/4528BBE2CAA887CD6CBF24DD367C9CC1?branchId=b62d4097-a954-474a-95c0-085b6b0c9a1a&filter=issueType%3Alocalized-name%3DUnreachable%252C%20Unused%20or%20Dead%20Code%26context%3AtoolType%3Dsast%26issueProperties%3Alocation%3Dapp%2Fviews%2Flogin.html)\n\nCode can never be reached because of a logical contradiction"
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "app/views/login.html"
                                },
                                "region": {
                                    "startLine": 159
                                }
                            }
                        }
                    ],
                    "ruleId": "deadcode:logical_contradiction|javascript",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "4c3bec170549ff81995c8445a7cbcdfa339c61b974ea9513ef70dda5c7a78008"
                    }
                },
                {
                    "message": {
                        "text": "[\\[See in Polaris\\]](https://pim.dev.polaris.blackduck.com/portfolio/portfolios/c8003202-7753-40f9-9125-7a4fb82fa1cb/portfolio-items/7c83cf52-32e1-4e9c-9421-4841b947fb55/projects/ca44c961-5c06-4254-a5bb-0a812c391cda/issues/8AED90BFD85B397B76D7725D74579AFF?branchId=b62d4097-a954-474a-95c0-085b6b0c9a1a&filter=issueType%3Alocalized-name%3DFiles%20or%20Directories%20Accessible%20to%20External%20Parties%26context%3AtoolType%3Dsast%26issueProperties%3Alocation%3Ddocker-compose.yml)\n\nThe docker service container is configured to permit writing to the root filesystem. This makes some security attack vectors such as privilege escalation, denial-of-service or authorization bypass possible since the container instance's filesystem can be tampered with."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "docker-compose.yml"
                                },
                                "region": {
                                    "startLine": 5
                                }
                            }
                        }
                    ],
                    "ruleId": "sigma.container_filesystem_write:docker_compose|text",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "f67f811965e64c3c9707ca94137b421b2790b3775f4a21f94fe51d9becb55ce8"
                    }
                },
                {
                    "message": {
                        "text": "[\\[See in Polaris\\]](https://pim.dev.polaris.blackduck.com/portfolio/portfolios/c8003202-7753-40f9-9125-7a4fb82fa1cb/portfolio-items/7c83cf52-32e1-4e9c-9421-4841b947fb55/projects/ca44c961-5c06-4254-a5bb-0a812c391cda/issues/7A41A7C019B34DF61C4AA8CC990BEAA5?branchId=b62d4097-a954-474a-95c0-085b6b0c9a1a&filter=issueType%3Alocalized-name%3DFiles%20or%20Directories%20Accessible%20to%20External%20Parties%26context%3AtoolType%3Dsast%26issueProperties%3Alocation%3Ddocker-compose.yml)\n\nThe docker service container is configured to permit writing to the root filesystem. This makes some security attack vectors such as privilege escalation, denial-of-service or authorization bypass possible since the container instance's filesystem can be tampered with."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "docker-compose.yml"
                                },
                                "region": {
                                    "startLine": 14
                                }
                            }
                        }
                    ],
                    "ruleId": "sigma.container_filesystem_write:docker_compose|text",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "ca4d2cf9573284db318837ccb906fc1c8b298c94a19680baa248e3f5a35d01a3"
                    }
                },
                {
                    "message": {
                        "text": "[\\[See in Polaris\\]](https://pim.dev.polaris.blackduck.com/portfolio/portfolios/c8003202-7753-40f9-9125-7a4fb82fa1cb/portfolio-items/7c83cf52-32e1-4e9c-9421-4841b947fb55/projects/ca44c961-5c06-4254-a5bb-0a812c391cda/issues/752810C8C41CAF99CD85F63431487A69?branchId=b62d4097-a954-474a-95c0-085b6b0c9a1a&filter=issueType%3Alocalized-name%3DImproper%20Privilege%20Management%26context%3AtoolType%3Dsast%26issueProperties%3Alocation%3Ddocker-compose.yml)\n\nThe Docker Compose file sets the `no-new-privileges` attribute to `false` or omits it as the default value is `false`. This doesn't restrict the container from acquiring additional privileges via SUID or SGID bits. This allows privilege escalation, meaning a user can set the security context of the container and can perform root-level operations."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "docker-compose.yml"
                                },
                                "region": {
                                    "startLine": 5
                                }
                            }
                        }
                    ],
                    "ruleId": "sigma.container_privilege_escalation_allowed:docker_compose|text",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "b62688b0e9384ff7dc2fd89825670bb5c20120fe9c859f36136f4c3e432c0104"
                    }
                },
                {
                    "message": {
                        "text": "[\\[See in Polaris\\]](https://pim.dev.polaris.blackduck.com/portfolio/portfolios/c8003202-7753-40f9-9125-7a4fb82fa1cb/portfolio-items/7c83cf52-32e1-4e9c-9421-4841b947fb55/projects/ca44c961-5c06-4254-a5bb-0a812c391cda/issues/80024AB6E9C660F167261BEC4181CE39?branchId=b62d4097-a954-474a-95c0-085b6b0c9a1a&filter=issueType%3Alocalized-name%3DImproper%20Privilege%20Management%26context%3AtoolType%3Dsast%26issueProperties%3Alocation%3Ddocker-compose.yml)\n\nThe Docker Compose file sets the `no-new-privileges` attribute to `false` or omits it as the default value is `false`. This doesn't restrict the container from acquiring additional privileges via SUID or SGID bits. This allows privilege escalation, meaning a user can set the security context of the container and can perform root-level operations."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "docker-compose.yml"
                                },
                                "region": {
                                    "startLine": 14
                                }
                            }
                        }
                    ],
                    "ruleId": "sigma.container_privilege_escalation_allowed:docker_compose|text",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "2029b8313a234401c003b6400d9fef22dd6d74470d3dd17ddb2fe720a1e97e1e"
                    }
                },
                {
                    "message": {
                        "text": "[\\[See in Polaris\\]](https://pim.dev.polaris.blackduck.com/portfolio/portfolios/c8003202-7753-40f9-9125-7a4fb82fa1cb/portfolio-items/7c83cf52-32e1-4e9c-9421-4841b947fb55/projects/ca44c961-5c06-4254-a5bb-0a812c391cda/issues/7D51153C989C21B7B8D4807C83B7EBA4?branchId=b62d4097-a954-474a-95c0-085b6b0c9a1a&filter=issueType%3Alocalized-name%3DImproper%20Privilege%20Management%26context%3AtoolType%3Dsast%26issueProperties%3Alocation%3Ddocker-compose.yml)\n\nThe Docker container requests the `NET_RAW` capability, either explicitly or by default, granting access to the host's network interfaces."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "docker-compose.yml"
                                },
                                "region": {
                                    "startLine": 5
                                }
                            }
                        }
                    ],
                    "ruleId": "sigma.container_requesting_net_raw:docker_compose|text",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "219d4e25f54531b1cff474fc6ab24584edbd1b9521b37dd35ed3785867e4a334"
                    }
                },
                {
                    "message": {
                        "text": "[\\[See in Polaris\\]](https://pim.dev.polaris.blackduck.com/portfolio/portfolios/c8003202-7753-40f9-9125-7a4fb82fa1cb/portfolio-items/7c83cf52-32e1-4e9c-9421-4841b947fb55/projects/ca44c961-5c06-4254-a5bb-0a812c391cda/issues/F2EF9B90FC695B91346428FEEC794096?branchId=b62d4097-a954-474a-95c0-085b6b0c9a1a&filter=issueType%3Alocalized-name%3DImproper%20Privilege%20Management%26context%3AtoolType%3Dsast%26issueProperties%3Alocation%3Ddocker-compose.yml)\n\nThe Docker container requests the `NET_RAW` capability, either explicitly or by default, granting access to the host's network interfaces."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "docker-compose.yml"
                                },
                                "region": {
                                    "startLine": 14
                                }
                            }
                        }
                    ],
                    "ruleId": "sigma.container_requesting_net_raw:docker_compose|text",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "61bab6765d0cbf886871ac4ea668e610154eaebfc5ae40caf071be88f3006251"
                    }
                },
                {
                    "message": {
                        "text": "[\\[See in Polaris\\]](https://pim.dev.polaris.blackduck.com/portfolio/portfolios/c8003202-7753-40f9-9125-7a4fb82fa1cb/portfolio-items/7c83cf52-32e1-4e9c-9421-4841b947fb55/projects/ca44c961-5c06-4254-a5bb-0a812c391cda/issues/55226ED12EC3723CB79B8FDF9CFB4EE3?branchId=b62d4097-a954-474a-95c0-085b6b0c9a1a&filter=issueType%3Alocalized-name%3DImproper%20Encoding%20or%20Escaping%20of%20Output%26context%3AtoolType%3Dsast%26issueProperties%3Alocation%3Dserver.js)\n\nSetting the `autoescape` attribute to `false` disables the escaping mechanism of the Swig template engine. This may lead to XSS attack if untrusted data is not properly validated and escaped."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "server.js"
                                },
                                "region": {
                                    "startLine": 137
                                }
                            }
                        }
                    ],
                    "ruleId": "sigma.expression_escaping_disabled:swig|javascript",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "616532443f8b80925eaf206e276b131c6fef5b077fe1666143bab584de1798d0"
                    }
                },
                {
                    "message": {
                        "text": "[\\[See in Polaris\\]](https://pim.dev.polaris.blackduck.com/portfolio/portfolios/c8003202-7753-40f9-9125-7a4fb82fa1cb/portfolio-items/7c83cf52-32e1-4e9c-9421-4841b947fb55/projects/ca44c961-5c06-4254-a5bb-0a812c391cda/issues/7C4B9371045310E91C329EFBDF393E03?branchId=b62d4097-a954-474a-95c0-085b6b0c9a1a&filter=issueType%3Alocalized-name%3DUse%20of%20Hard-coded%20Credentials%26context%3AtoolType%3Dsast%26issueProperties%3Alocation%3Dconfig%2Fenv%2Fall.js)\n\nA secret, such as a password, cryptographic key, or token is stored in plaintext directly in the source code, in an application's properties, or configuration file. Users with access to the secret may then use the secret to access resources that they otherwise would not have access to."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "config/env/all.js"
                                },
                                "region": {
                                    "startLine": 8
                                }
                            }
                        }
                    ],
                    "ruleId": "sigma.hardcoded_secret:pattern_low|javascript",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "2fb7da11221d440a18bb7d24d81d854aba038f742a31b6797bd06a6868b1ffb2"
                    }
                },
                {
                    "message": {
                        "text": "[\\[See in Polaris\\]](https://pim.dev.polaris.blackduck.com/portfolio/portfolios/c8003202-7753-40f9-9125-7a4fb82fa1cb/portfolio-items/7c83cf52-32e1-4e9c-9421-4841b947fb55/projects/ca44c961-5c06-4254-a5bb-0a812c391cda/issues/07E77C6C1AD3467B5069A9EF05F97EDC?branchId=b62d4097-a954-474a-95c0-085b6b0c9a1a&filter=issueType%3Alocalized-name%3DUse%20of%20Hard-coded%20Credentials%26context%3AtoolType%3Dsast%26issueProperties%3Alocation%3Dapp%2Froutes%2Fsession.js)\n\nA secret, such as a password, cryptographic key, or token is stored in plaintext directly in the source code, in an application's properties, or configuration file. Users with access to the secret may then use the secret to access resources that they otherwise would not have access to."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "app/routes/session.js"
                                },
                                "region": {
                                    "startLine": 61
                                }
                            }
                        }
                    ],
                    "ruleId": "sigma.hardcoded_secret:pattern_low|javascript",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "3994bf8e6d00f5a8faf451b14fc601989bf80d0fbc876b9db73fe8828397aa35"
                    }
                },
                {
                    "message": {
                        "text": "[\\[See in Polaris\\]](https://pim.dev.polaris.blackduck.com/portfolio/portfolios/c8003202-7753-40f9-9125-7a4fb82fa1cb/portfolio-items/7c83cf52-32e1-4e9c-9421-4841b947fb55/projects/ca44c961-5c06-4254-a5bb-0a812c391cda/issues/8A7191C1E5DB0FF114CBE1E1DE00E2AA?branchId=b62d4097-a954-474a-95c0-085b6b0c9a1a&filter=issueType%3Alocalized-name%3DUse%20of%20Hard-coded%20Credentials%26context%3AtoolType%3Dsast%26issueProperties%3Alocation%3Dconfig%2Fenv%2Ftest.js)\n\nA secret, such as a password, cryptographic key, or token is stored in plaintext directly in the source code, in an application's properties, or configuration file. Users with access to the secret may then use the secret to access resources that they otherwise would not have access to."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "config/env/test.js"
                                },
                                "region": {
                                    "startLine": 6
                                }
                            }
                        }
                    ],
                    "ruleId": "sigma.hardcoded_secret:pattern_low|javascript",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "3a2843b611fce42d4ac917bd73b982725a1e2ccd5b21d03b08b84eeeccb08637"
                    }
                },
                {
                    "message": {
                        "text": "[\\[See in Polaris\\]](https://pim.dev.polaris.blackduck.com/portfolio/portfolios/c8003202-7753-40f9-9125-7a4fb82fa1cb/portfolio-items/7c83cf52-32e1-4e9c-9421-4841b947fb55/projects/ca44c961-5c06-4254-a5bb-0a812c391cda/issues/826EFC79F72A768C58CC76640505185C?branchId=b62d4097-a954-474a-95c0-085b6b0c9a1a&filter=issueType%3Alocalized-name%3DUse%20of%20Hard-coded%20Credentials%26context%3AtoolType%3Dsast%26issueProperties%3Alocation%3Dapp%2Froutes%2Fsession.js)\n\nA secret, such as a password, cryptographic key, or token is stored in plaintext directly in the source code, in an application's properties, or configuration file. Users with access to the secret may then use the secret to access resources that they otherwise would not have access to."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "app/routes/session.js"
                                },
                                "region": {
                                    "startLine": 172
                                }
                            }
                        }
                    ],
                    "ruleId": "sigma.hardcoded_secret:pattern_low|javascript",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "304ebabac033d70056e4df597da84c3e3212041666eb6121b3c9b0142e027592"
                    }
                },
                {
                    "message": {
                        "text": "[\\[See in Polaris\\]](https://pim.dev.polaris.blackduck.com/portfolio/portfolios/c8003202-7753-40f9-9125-7a4fb82fa1cb/portfolio-items/7c83cf52-32e1-4e9c-9421-4841b947fb55/projects/ca44c961-5c06-4254-a5bb-0a812c391cda/issues/88B738A11109D609A2EB9AEDD4798933?branchId=b62d4097-a954-474a-95c0-085b6b0c9a1a&filter=issueType%3Alocalized-name%3DUse%20of%20Hard-coded%20Credentials%26context%3AtoolType%3Dsast%26issueProperties%3Alocation%3Dartifacts%2Fdb-reset.js)\n\nA secret, such as a password, cryptographic key, or token is stored in plaintext directly in the source code, in an application's properties, or configuration file. Users with access to the secret may then use the secret to access resources that they otherwise would not have access to."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "artifacts/db-reset.js"
                                },
                                "region": {
                                    "startLine": 35
                                }
                            }
                        }
                    ],
                    "ruleId": "sigma.hardcoded_secret:pattern_low|javascript",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "fb738614a569612f0636c4b2fe277bc55af5ca99a037fe51f9fa70557df812b8"
                    }
                },
                {
                    "message": {
                        "text": "[\\[See in Polaris\\]](https://pim.dev.polaris.blackduck.com/portfolio/portfolios/c8003202-7753-40f9-9125-7a4fb82fa1cb/portfolio-items/7c83cf52-32e1-4e9c-9421-4841b947fb55/projects/ca44c961-5c06-4254-a5bb-0a812c391cda/issues/23D360CE77515771D8B4BA3BC6D9844C?branchId=b62d4097-a954-474a-95c0-085b6b0c9a1a&filter=issueType%3Alocalized-name%3DUse%20of%20Hard-coded%20Credentials%26context%3AtoolType%3Dsast%26issueProperties%3Alocation%3Dartifacts%2Fdb-reset.js)\n\nA secret, such as a password, cryptographic key, or token is stored in plaintext directly in the source code, in an application's properties, or configuration file. Users with access to the secret may then use the secret to access resources that they otherwise would not have access to."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "artifacts/db-reset.js"
                                },
                                "region": {
                                    "startLine": 27
                                }
                            }
                        }
                    ],
                    "ruleId": "sigma.hardcoded_secret:pattern_low|javascript",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "4b2a2f0a47dc8cb8faf5b592dc6f3c4379dea6de37b776b4406055aa641d2ce5"
                    }
                },
                {
                    "message": {
                        "text": "[\\[See in Polaris\\]](https://pim.dev.polaris.blackduck.com/portfolio/portfolios/c8003202-7753-40f9-9125-7a4fb82fa1cb/portfolio-items/7c83cf52-32e1-4e9c-9421-4841b947fb55/projects/ca44c961-5c06-4254-a5bb-0a812c391cda/issues/ABAA356CEDA68B6B499A9E23A5EEA80B?branchId=b62d4097-a954-474a-95c0-085b6b0c9a1a&filter=issueType%3Alocalized-name%3DUse%20of%20Hard-coded%20Credentials%26context%3AtoolType%3Dsast%26issueProperties%3Alocation%3Dtest%2Fsecurity%2Fprofile-test.js)\n\nA secret, such as a password, cryptographic key, or token is stored in plaintext directly in the source code, in an application's properties, or configuration file. Users with access to the secret may then use the secret to access resources that they otherwise would not have access to."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "test/security/profile-test.js"
                                },
                                "region": {
                                    "startLine": 37
                                }
                            }
                        }
                    ],
                    "ruleId": "sigma.hardcoded_secret:pattern_low|javascript",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "69a094ac1999725c32ed863c6ed804eb2451f5bf5b79d84470e24526b0dc1cbb"
                    }
                },
                {
                    "message": {
                        "text": "[\\[See in Polaris\\]](https://pim.dev.polaris.blackduck.com/portfolio/portfolios/c8003202-7753-40f9-9125-7a4fb82fa1cb/portfolio-items/7c83cf52-32e1-4e9c-9421-4841b947fb55/projects/ca44c961-5c06-4254-a5bb-0a812c391cda/issues/880155DF2BA28A2F5FBC8A597078580F?branchId=b62d4097-a954-474a-95c0-085b6b0c9a1a&filter=issueType%3Alocalized-name%3DUse%20of%20Hard-coded%20Credentials%26context%3AtoolType%3Dsast%26issueProperties%3Alocation%3Dartifacts%2Fdb-reset.js)\n\nA secret, such as a password, cryptographic key, or token is stored in plaintext directly in the source code, in an application's properties, or configuration file. Users with access to the secret may then use the secret to access resources that they otherwise would not have access to."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "artifacts/db-reset.js"
                                },
                                "region": {
                                    "startLine": 18
                                }
                            }
                        }
                    ],
                    "ruleId": "sigma.hardcoded_secret:pattern_low|javascript",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "e78089d5b57839f015a3c1ad71b6c662d8b0acd74d5817efbda4e86a9a2fc3e9"
                    }
                },
                {
                    "message": {
                        "text": "[\\[See in Polaris\\]](https://pim.dev.polaris.blackduck.com/portfolio/portfolios/c8003202-7753-40f9-9125-7a4fb82fa1cb/portfolio-items/7c83cf52-32e1-4e9c-9421-4841b947fb55/projects/ca44c961-5c06-4254-a5bb-0a812c391cda/issues/F9705DBDE6ADAEDB56B42CF44B24A5D2?branchId=b62d4097-a954-474a-95c0-085b6b0c9a1a&filter=issueType%3Alocalized-name%3DUse%20of%20Hard-coded%20Credentials%26context%3AtoolType%3Dsast%26issueProperties%3Alocation%3Dconfig%2Fenv%2Fdevelopment.js)\n\nA secret, such as a password, cryptographic key, or token is stored in plaintext directly in the source code, in an application's properties, or configuration file. Users with access to the secret may then use the secret to access resources that they otherwise would not have access to."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "config/env/development.js"
                                },
                                "region": {
                                    "startLine": 6
                                }
                            }
                        }
                    ],
                    "ruleId": "sigma.hardcoded_secret:pattern_low|javascript",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "fa04de61e591bb6a109fe8d9dce45091e0aa3cc80e2c3f07f9264edfc537dca3"
                    }
                },
                {
                    "message": {
                        "text": "[\\[See in Polaris\\]](https://pim.dev.polaris.blackduck.com/portfolio/portfolios/c8003202-7753-40f9-9125-7a4fb82fa1cb/portfolio-items/7c83cf52-32e1-4e9c-9421-4841b947fb55/projects/ca44c961-5c06-4254-a5bb-0a812c391cda/issues/65088C0D7227342DA968439CD592C973?branchId=b62d4097-a954-474a-95c0-085b6b0c9a1a&filter=issueType%3Alocalized-name%3DUse%20of%20Hard-coded%20Credentials%26context%3AtoolType%3Dsast%26issueProperties%3Alocation%3Dtest%2Fe2e%2Ffixtures%2Fusers%2Fuser.json)\n\nA secret, such as a password, cryptographic key, or token is stored in plaintext directly in the source code, in an application's properties, or configuration file. Users with access to the secret may then use the secret to access resources that they otherwise would not have access to."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "test/e2e/fixtures/users/user.json"
                                },
                                "region": {
                                    "startLine": 3
                                }
                            }
                        }
                    ],
                    "ruleId": "sigma.hardcoded_secret:pattern_low|text",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "c00b85e6758e6ea2f2d7635ae37fc2b037f4ad5b20aeb5335da224c178c5cafa"
                    }
                },
                {
                    "message": {
                        "text": "[\\[See in Polaris\\]](https://pim.dev.polaris.blackduck.com/portfolio/portfolios/c8003202-7753-40f9-9125-7a4fb82fa1cb/portfolio-items/7c83cf52-32e1-4e9c-9421-4841b947fb55/projects/ca44c961-5c06-4254-a5bb-0a812c391cda/issues/66F8D1D570B61CFCB29EE710163106C9?branchId=b62d4097-a954-474a-95c0-085b6b0c9a1a&filter=issueType%3Alocalized-name%3DUse%20of%20Hard-coded%20Credentials%26context%3AtoolType%3Dsast%26issueProperties%3Alocation%3Dpim.json)\n\nA secret, such as a password, cryptographic key, or token is stored in plaintext directly in the source code, in an application's properties, or configuration file. Users with access to the secret may then use the secret to access resources that they otherwise would not have access to."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "pim.json"
                                },
                                "region": {
                                    "startLine": 50
                                }
                            }
                        }
                    ],
                    "ruleId": "sigma.hardcoded_secret:pattern_low|text",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "4938ef58f52974ee6a9c4422ec6b575e3c11678e97eb26e431ce02aa00ee77af"
                    }
                },
                {
                    "message": {
                        "text": "[\\[See in Polaris\\]](https://pim.dev.polaris.blackduck.com/portfolio/portfolios/c8003202-7753-40f9-9125-7a4fb82fa1cb/portfolio-items/7c83cf52-32e1-4e9c-9421-4841b947fb55/projects/ca44c961-5c06-4254-a5bb-0a812c391cda/issues/FB8A771D4E5240492C07B8DA614FC979?branchId=b62d4097-a954-474a-95c0-085b6b0c9a1a&filter=issueType%3Alocalized-name%3DUse%20of%20Hard-coded%20Credentials%26context%3AtoolType%3Dsast%26issueProperties%3Alocation%3Dtest%2Fe2e%2Ffixtures%2Fusers%2Fnew_user.json)\n\nA secret, such as a password, cryptographic key, or token is stored in plaintext directly in the source code, in an application's properties, or configuration file. Users with access to the secret may then use the secret to access resources that they otherwise would not have access to."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "test/e2e/fixtures/users/new_user.json"
                                },
                                "region": {
                                    "startLine": 5
                                }
                            }
                        }
                    ],
                    "ruleId": "sigma.hardcoded_secret:pattern_low|text",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "bd056f93efd14099f12cc5c584858ef265db9634a7bf395970975f488174a2f7"
                    }
                },
                {
                    "message": {
                        "text": "[\\[See in Polaris\\]](https://pim.dev.polaris.blackduck.com/portfolio/portfolios/c8003202-7753-40f9-9125-7a4fb82fa1cb/portfolio-items/7c83cf52-32e1-4e9c-9421-4841b947fb55/projects/ca44c961-5c06-4254-a5bb-0a812c391cda/issues/66722CA3241EED18D0D984C2C6D55372?branchId=b62d4097-a954-474a-95c0-085b6b0c9a1a&filter=issueType%3Alocalized-name%3DUse%20of%20Hard-coded%20Credentials%26context%3AtoolType%3Dsast%26issueProperties%3Alocation%3Dpim.json)\n\nA secret, such as a password, cryptographic key, or token is stored in plaintext directly in the source code, in an application's properties, or configuration file. Users with access to the secret may then use the secret to access resources that they otherwise would not have access to."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "pim.json"
                                },
                                "region": {
                                    "startLine": 5
                                }
                            }
                        }
                    ],
                    "ruleId": "sigma.hardcoded_secret:pattern_low|text",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "ee59b41f3dee95a32109f1f48930c7e5ef2510cff063c0759a0c0e32c324ee8c"
                    }
                },
                {
                    "message": {
                        "text": "[\\[See in Polaris\\]](https://pim.dev.polaris.blackduck.com/portfolio/portfolios/c8003202-7753-40f9-9125-7a4fb82fa1cb/portfolio-items/7c83cf52-32e1-4e9c-9421-4841b947fb55/projects/ca44c961-5c06-4254-a5bb-0a812c391cda/issues/FB13CC4C4FD30EA01855CD97A44A3101?branchId=b62d4097-a954-474a-95c0-085b6b0c9a1a&filter=issueType%3Alocalized-name%3DUse%20of%20Hard-coded%20Credentials%26context%3AtoolType%3Dsast%26issueProperties%3Alocation%3Dtest%2Fe2e%2Ffixtures%2Fusers%2Fadmin.json)\n\nA secret, such as a password, cryptographic key, or token is stored in plaintext directly in the source code, in an application's properties, or configuration file. Users with access to the secret may then use the secret to access resources that they otherwise would not have access to."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "test/e2e/fixtures/users/admin.json"
                                },
                                "region": {
                                    "startLine": 3
                                }
                            }
                        }
                    ],
                    "ruleId": "sigma.hardcoded_secret:pattern_low|text",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "43a8031bade4c1409c843b04c3e4e50667f6e1e32d4980cd8c60fc2a66686189"
                    }
                },
                {
                    "message": {
                        "text": "[\\[See in Polaris\\]](https://pim.dev.polaris.blackduck.com/portfolio/portfolios/c8003202-7753-40f9-9125-7a4fb82fa1cb/portfolio-items/7c83cf52-32e1-4e9c-9421-4841b947fb55/projects/ca44c961-5c06-4254-a5bb-0a812c391cda/issues/98E4733E80B250A35B41C9E834089B02?branchId=b62d4097-a954-474a-95c0-085b6b0c9a1a&filter=issueType%3Alocalized-name%3DImproper%20Access%20Control%26context%3AtoolType%3Dsast%26issueProperties%3Alocation%3Ddocker-compose.yml)\n\nThe Docker container is not configured to drop all default capabilities and then add only required one. Thus the container may be granted excessive privileges which violate the least privilege principle."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "docker-compose.yml"
                                },
                                "region": {
                                    "startLine": 5
                                }
                            }
                        }
                    ],
                    "ruleId": "sigma.least_privilege_violation:docker_compose|text",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "913aca9ec9a18181d2fcadd8a0301fe193fe6594c99a92287c79bd1450c20af2"
                    }
                },
                {
                    "message": {
                        "text": "[\\[See in Polaris\\]](https://pim.dev.polaris.blackduck.com/portfolio/portfolios/c8003202-7753-40f9-9125-7a4fb82fa1cb/portfolio-items/7c83cf52-32e1-4e9c-9421-4841b947fb55/projects/ca44c961-5c06-4254-a5bb-0a812c391cda/issues/8596B13ECACE40804E17336F80958BAE?branchId=b62d4097-a954-474a-95c0-085b6b0c9a1a&filter=issueType%3Alocalized-name%3DImproper%20Access%20Control%26context%3AtoolType%3Dsast%26issueProperties%3Alocation%3Ddocker-compose.yml)\n\nThe Docker container is not configured to drop all default capabilities and then add only required one. Thus the container may be granted excessive privileges which violate the least privilege principle."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "docker-compose.yml"
                                },
                                "region": {
                                    "startLine": 14
                                }
                            }
                        }
                    ],
                    "ruleId": "sigma.least_privilege_violation:docker_compose|text",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "52d5d809ff5eb879ee048db3997d6fb6087f3f7223ba0edd01e64055acae9fe6"
                    }
                },
                {
                    "message": {
                        "text": "[\\[See in Polaris\\]](https://pim.dev.polaris.blackduck.com/portfolio/portfolios/c8003202-7753-40f9-9125-7a4fb82fa1cb/portfolio-items/7c83cf52-32e1-4e9c-9421-4841b947fb55/projects/ca44c961-5c06-4254-a5bb-0a812c391cda/issues/D387E76D690B0C29464D6244A044F038?branchId=b62d4097-a954-474a-95c0-085b6b0c9a1a&filter=issueType%3Alocalized-name%3DInclusion%20of%20Functionality%20from%20Untrusted%20Control%20Sphere%26context%3AtoolType%3Dsast%26issueProperties%3Alocation%3Dapp%2Fviews%2Ftutorial%2Fa10.html)\n\nThe `sandbox` attribute of an `iframe` is not set in HTML. This iframe loads content from a third-party site. If the JavaScript in that iframe is malicious or was compromised, an attacker can break out of the iframe, access the DOM of the main page, and mount a clickjacking or a phishing attack."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "app/views/tutorial/a10.html"
                                },
                                "region": {
                                    "startLine": 31
                                }
                            }
                        }
                    ],
                    "ruleId": "sigma.missing_iframe_sandbox:html|html",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "6fdeaa5a738886c479cb4d956b0cb9b03cee5ad490c4fbe2a5e3d022e088dac9"
                    }
                },
                {
                    "message": {
                        "text": "[\\[See in Polaris\\]](https://pim.dev.polaris.blackduck.com/portfolio/portfolios/c8003202-7753-40f9-9125-7a4fb82fa1cb/portfolio-items/7c83cf52-32e1-4e9c-9421-4841b947fb55/projects/ca44c961-5c06-4254-a5bb-0a812c391cda/issues/7022F324FCECA1F009BE9C3B8145F583?branchId=b62d4097-a954-474a-95c0-085b6b0c9a1a&filter=issueType%3Alocalized-name%3DInclusion%20of%20Functionality%20from%20Untrusted%20Control%20Sphere%26context%3AtoolType%3Dsast%26issueProperties%3Alocation%3Dapp%2Fviews%2Ftutorial%2Fa4.html)\n\nThe `sandbox` attribute of an `iframe` is not set in HTML. This iframe loads content from a third-party site. If the JavaScript in that iframe is malicious or was compromised, an attacker can break out of the iframe, access the DOM of the main page, and mount a clickjacking or a phishing attack."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "app/views/tutorial/a4.html"
                                },
                                "region": {
                                    "startLine": 32
                                }
                            }
                        }
                    ],
                    "ruleId": "sigma.missing_iframe_sandbox:html|html",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "7226828b9d9315f3f89512611ed1580d77fc459c1e21280e985566f775860b57"
                    }
                },
                {
                    "message": {
                        "text": "[\\[See in Polaris\\]](https://pim.dev.polaris.blackduck.com/portfolio/portfolios/c8003202-7753-40f9-9125-7a4fb82fa1cb/portfolio-items/7c83cf52-32e1-4e9c-9421-4841b947fb55/projects/ca44c961-5c06-4254-a5bb-0a812c391cda/issues/80638C49EB45E54E9DB5C2B838FB75F9?branchId=b62d4097-a954-474a-95c0-085b6b0c9a1a&filter=issueType%3Alocalized-name%3DInclusion%20of%20Functionality%20from%20Untrusted%20Control%20Sphere%26context%3AtoolType%3Dsast%26issueProperties%3Alocation%3Dapp%2Fviews%2Ftutorial%2Fa8.html)\n\nThe `sandbox` attribute of an `iframe` is not set in HTML. This iframe loads content from a third-party site. If the JavaScript in that iframe is malicious or was compromised, an attacker can break out of the iframe, access the DOM of the main page, and mount a clickjacking or a phishing attack."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "app/views/tutorial/a8.html"
                                },
                                "region": {
                                    "startLine": 42
                                }
                            }
                        }
                    ],
                    "ruleId": "sigma.missing_iframe_sandbox:html|html",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "ae3edfeed61510a7b77b856de02b4702cb81fc9de51d264f72cbc81aedc12693"
                    }
                },
                {
                    "message": {
                        "text": "[\\[See in Polaris\\]](https://pim.dev.polaris.blackduck.com/portfolio/portfolios/c8003202-7753-40f9-9125-7a4fb82fa1cb/portfolio-items/7c83cf52-32e1-4e9c-9421-4841b947fb55/projects/ca44c961-5c06-4254-a5bb-0a812c391cda/issues/B21BEE6C877B49F15F6B44267E423E2A?branchId=b62d4097-a954-474a-95c0-085b6b0c9a1a&filter=issueType%3Alocalized-name%3DInclusion%20of%20Functionality%20from%20Untrusted%20Control%20Sphere%26context%3AtoolType%3Dsast%26issueProperties%3Alocation%3Dapp%2Fviews%2Ftutorial%2Fa7.html)\n\nThe `sandbox` attribute of an `iframe` is not set in HTML. This iframe loads content from a third-party site. If the JavaScript in that iframe is malicious or was compromised, an attacker can break out of the iframe, access the DOM of the main page, and mount a clickjacking or a phishing attack."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "app/views/tutorial/a7.html"
                                },
                                "region": {
                                    "startLine": 30
                                }
                            }
                        }
                    ],
                    "ruleId": "sigma.missing_iframe_sandbox:html|html",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "bbb68f95db0aa1f3874ff56adbe6bc30f6d8254fca02533da0177c7a04d0a6a2"
                    }
                },
                {
                    "message": {
                        "text": "[\\[See in Polaris\\]](https://pim.dev.polaris.blackduck.com/portfolio/portfolios/c8003202-7753-40f9-9125-7a4fb82fa1cb/portfolio-items/7c83cf52-32e1-4e9c-9421-4841b947fb55/projects/ca44c961-5c06-4254-a5bb-0a812c391cda/issues/37D5AD3C82FC58EDE126043457F3B106?branchId=b62d4097-a954-474a-95c0-085b6b0c9a1a&filter=issueType%3Alocalized-name%3DInclusion%20of%20Functionality%20from%20Untrusted%20Control%20Sphere%26context%3AtoolType%3Dsast%26issueProperties%3Alocation%3Dapp%2Fviews%2Ftutorial%2Fssrf.html)\n\nThe `sandbox` attribute of an `iframe` is not set in HTML. This iframe loads content from a third-party site. If the JavaScript in that iframe is malicious or was compromised, an attacker can break out of the iframe, access the DOM of the main page, and mount a clickjacking or a phishing attack."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "app/views/tutorial/ssrf.html"
                                },
                                "region": {
                                    "startLine": 23
                                }
                            }
                        }
                    ],
                    "ruleId": "sigma.missing_iframe_sandbox:html|html",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "04e530b1040533d15c4f5e747f8514a219da6ed81ee834c2ba62d02efb45fe68"
                    }
                },
                {
                    "message": {
                        "text": "[\\[See in Polaris\\]](https://pim.dev.polaris.blackduck.com/portfolio/portfolios/c8003202-7753-40f9-9125-7a4fb82fa1cb/portfolio-items/7c83cf52-32e1-4e9c-9421-4841b947fb55/projects/ca44c961-5c06-4254-a5bb-0a812c391cda/issues/2DBF1F3DB8E581DE784563D087309254?branchId=b62d4097-a954-474a-95c0-085b6b0c9a1a&filter=issueType%3Alocalized-name%3DInclusion%20of%20Functionality%20from%20Untrusted%20Control%20Sphere%26context%3AtoolType%3Dsast%26issueProperties%3Alocation%3Dapp%2Fviews%2Ftutorial%2Fa5.html)\n\nThe `sandbox` attribute of an `iframe` is not set in HTML. This iframe loads content from a third-party site. If the JavaScript in that iframe is malicious or was compromised, an attacker can break out of the iframe, access the DOM of the main page, and mount a clickjacking or a phishing attack."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "app/views/tutorial/a5.html"
                                },
                                "region": {
                                    "startLine": 86
                                }
                            }
                        }
                    ],
                    "ruleId": "sigma.missing_iframe_sandbox:html|html",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "1e705bd7b02a59a8f7f0cfbf3b760e34c7f35a3450a26a622b5b1851aaf776cb"
                    }
                },
                {
                    "message": {
                        "text": "[\\[See in Polaris\\]](https://pim.dev.polaris.blackduck.com/portfolio/portfolios/c8003202-7753-40f9-9125-7a4fb82fa1cb/portfolio-items/7c83cf52-32e1-4e9c-9421-4841b947fb55/projects/ca44c961-5c06-4254-a5bb-0a812c391cda/issues/2074B16470A3F2B65AC718C1700024CA?branchId=b62d4097-a954-474a-95c0-085b6b0c9a1a&filter=issueType%3Alocalized-name%3DInclusion%20of%20Functionality%20from%20Untrusted%20Control%20Sphere%26context%3AtoolType%3Dsast%26issueProperties%3Alocation%3Dapp%2Fviews%2Ftutorial%2Fa3.html)\n\nThe `sandbox` attribute of an `iframe` is not set in HTML. This iframe loads content from a third-party site. If the JavaScript in that iframe is malicious or was compromised, an attacker can break out of the iframe, access the DOM of the main page, and mount a clickjacking or a phishing attack."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "app/views/tutorial/a3.html"
                                },
                                "region": {
                                    "startLine": 157
                                }
                            }
                        }
                    ],
                    "ruleId": "sigma.missing_iframe_sandbox:html|html",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "6666158726c6e184e6fdd3531eae72097733458494c77c2f8cbb8c2f5dccc374"
                    }
                },
                {
                    "message": {
                        "text": "[\\[See in Polaris\\]](https://pim.dev.polaris.blackduck.com/portfolio/portfolios/c8003202-7753-40f9-9125-7a4fb82fa1cb/portfolio-items/7c83cf52-32e1-4e9c-9421-4841b947fb55/projects/ca44c961-5c06-4254-a5bb-0a812c391cda/issues/C060651171D342580BD7A88FC20DD0B2?branchId=b62d4097-a954-474a-95c0-085b6b0c9a1a&filter=issueType%3Alocalized-name%3DInclusion%20of%20Functionality%20from%20Untrusted%20Control%20Sphere%26context%3AtoolType%3Dsast%26issueProperties%3Alocation%3Dapp%2Fviews%2Ftutorial%2Fa1.html)\n\nThe `sandbox` attribute of an `iframe` is not set in HTML. This iframe loads content from a third-party site. If the JavaScript in that iframe is malicious or was compromised, an attacker can break out of the iframe, access the DOM of the main page, and mount a clickjacking or a phishing attack."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "app/views/tutorial/a1.html"
                                },
                                "region": {
                                    "startLine": 98
                                }
                            }
                        }
                    ],
                    "ruleId": "sigma.missing_iframe_sandbox:html|html",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "b4c8d12879f3903eac9e152ba99cae0e91c16545995f9ec7b40cf34f73489b3b"
                    }
                },
                {
                    "message": {
                        "text": "[\\[See in Polaris\\]](https://pim.dev.polaris.blackduck.com/portfolio/portfolios/c8003202-7753-40f9-9125-7a4fb82fa1cb/portfolio-items/7c83cf52-32e1-4e9c-9421-4841b947fb55/projects/ca44c961-5c06-4254-a5bb-0a812c391cda/issues/66088FE8B231D0033A1640906305D5D9?branchId=b62d4097-a954-474a-95c0-085b6b0c9a1a&filter=issueType%3Alocalized-name%3DSensitive%20Cookie%20with%20Improper%20SameSite%20Attribute%26context%3AtoolType%3Dsast%26issueProperties%3Alocation%3Dserver.js)\n\nThe `cookie.sameSite` option is either undefined or set to the insecure value `none` or `false`. In all three cases, the cookie's `SameSite` attribute protections are disabled, allowing the browser to send cookies in cross-site requests. An attacker can abuse this missing protection to facilitate cross-site request forgery (CSRF) attacks."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "server.js"
                                },
                                "region": {
                                    "startLine": 78
                                }
                            }
                        }
                    ],
                    "ruleId": "sigma.missing_samesite_attribute_session_cookie:express|javascript",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "1d7a3579bd75a848a6cbce26d1a48449e7e545b83ae8f87411ed239743e669de"
                    }
                },
                {
                    "message": {
                        "text": "[\\[See in Polaris\\]](https://pim.dev.polaris.blackduck.com/portfolio/portfolios/c8003202-7753-40f9-9125-7a4fb82fa1cb/portfolio-items/7c83cf52-32e1-4e9c-9421-4841b947fb55/projects/ca44c961-5c06-4254-a5bb-0a812c391cda/issues/3BDC3D863E16C5E0C636145DEBDFC083?branchId=b62d4097-a954-474a-95c0-085b6b0c9a1a&filter=issueType%3Alocalized-name%3DSecure%20Cookie%20Attribute%20Not%20Set%26context%3AtoolType%3Dsast%26issueProperties%3Alocation%3Dserver.js)\n\nThe configuration of the `client-sessions`, `cookie-session` or `express-session` library does not set the `secure` attribute of the session cookie. While web browsers send cookies with the `secure` attribute only over HTTPS, they do send cookies without it over HTTP. If an attacker can fool the victim's browser into sending an HTTP request to the vulnerable site (for example, with JavaScript code on a malicious page or with a phishing link), the victim's browser will send the vulnerable cookie in clear text. If the attacker can also intercept this network traffic, then they can steal the victim's session cookie and impersonate the victim."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "server.js"
                                },
                                "region": {
                                    "startLine": 78
                                }
                            }
                        }
                    ],
                    "ruleId": "sigma.missing_secure_attribute_session_cookie:express|javascript",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "78552c0d86cd479178055346a4d3ef5a55bbbb4228d42ec9982335c9612cca44"
                    }
                },
                {
                    "message": {
                        "text": "[\\[See in Polaris\\]](https://pim.dev.polaris.blackduck.com/portfolio/portfolios/c8003202-7753-40f9-9125-7a4fb82fa1cb/portfolio-items/7c83cf52-32e1-4e9c-9421-4841b947fb55/projects/ca44c961-5c06-4254-a5bb-0a812c391cda/issues/7523038CCF53844949C1DD96C94E47CB?branchId=b62d4097-a954-474a-95c0-085b6b0c9a1a&filter=issueType%3Alocalized-name%3DCleartext%20Transmission%20of%20Sensitive%20Information%26context%3AtoolType%3Dsast%26issueProperties%3Alocation%3Dserver.js)\n\nA web server is created using the insecure `HTTP` scheme. As a result, application data is transmitted over an insecure channel where it can be read and modified by attackers."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "server.js"
                                },
                                "region": {
                                    "startLine": 145
                                }
                            }
                        }
                    ],
                    "ruleId": "sigma.missing_tls:node_http_server|javascript",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "ae6ffcbf6e5b0fef5357e10a427dc19412da9899c86f549a6fc6e7c0e59b7312"
                    }
                },
                {
                    "message": {
                        "text": "[\\[See in Polaris\\]](https://pim.dev.polaris.blackduck.com/portfolio/portfolios/c8003202-7753-40f9-9125-7a4fb82fa1cb/portfolio-items/7c83cf52-32e1-4e9c-9421-4841b947fb55/projects/ca44c961-5c06-4254-a5bb-0a812c391cda/issues/CE6C9E92E9D974BEE69EBE1CEBFE8641?branchId=b62d4097-a954-474a-95c0-085b6b0c9a1a&filter=issueType%3Alocalized-name%3DInsecure%20Link%20Target%26context%3AtoolType%3Dsast%26issueProperties%3Alocation%3Dapp%2Fviews%2Ftutorial%2Fa1.html)\n\nThe application uses an anchor tag whose `target` attribute is set to `_blank`, but the `rel` attribute is not set with the `noopener` value. The page opened from that target link may have the access to the `location` object of the original page through `window.opener.location`. A malicious page associated with this link will be able to navigate the original page to an arbitrary site, such as a phishing site, and thus, execute a reverse tabnabbing attack.\nNote that most contemporary browsers add the `noopener` value to the `rel` automatically by default. Thus, only users with older versions of browsers are targets for this phishing attack."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "app/views/tutorial/a1.html"
                                },
                                "region": {
                                    "startLine": 179
                                }
                            }
                        }
                    ],
                    "ruleId": "sigma.reverse_tabnabbing:html|html",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "70e90ec17d8509da2f181b58fd22688e1e386df3e34be26ce404a0923e244fbb"
                    }
                },
                {
                    "message": {
                        "text": "[\\[See in Polaris\\]](https://pim.dev.polaris.blackduck.com/portfolio/portfolios/c8003202-7753-40f9-9125-7a4fb82fa1cb/portfolio-items/7c83cf52-32e1-4e9c-9421-4841b947fb55/projects/ca44c961-5c06-4254-a5bb-0a812c391cda/issues/94C5419C036C4FCC06DFCFF7F976C99B?branchId=b62d4097-a954-474a-95c0-085b6b0c9a1a&filter=issueType%3Alocalized-name%3DInsecure%20Link%20Target%26context%3AtoolType%3Dsast%26issueProperties%3Alocation%3Dapp%2Fviews%2Ftutorial%2Fa8.html)\n\nThe application uses an anchor tag whose `target` attribute is set to `_blank`, but the `rel` attribute is not set with the `noopener` value. The page opened from that target link may have the access to the `location` object of the original page through `window.opener.location`. A malicious page associated with this link will be able to navigate the original page to an arbitrary site, such as a phishing site, and thus, execute a reverse tabnabbing attack.\nNote that most contemporary browsers add the `noopener` value to the `rel` automatically by default. Thus, only users with older versions of browsers are targets for this phishing attack."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "app/views/tutorial/a8.html"
                                },
                                "region": {
                                    "startLine": 59
                                }
                            }
                        }
                    ],
                    "ruleId": "sigma.reverse_tabnabbing:html|html",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "88454b30453187aef35e2f644526305a06566678307e3b7d178a7e7fb4cacd24"
                    }
                },
                {
                    "message": {
                        "text": "[\\[See in Polaris\\]](https://pim.dev.polaris.blackduck.com/portfolio/portfolios/c8003202-7753-40f9-9125-7a4fb82fa1cb/portfolio-items/7c83cf52-32e1-4e9c-9421-4841b947fb55/projects/ca44c961-5c06-4254-a5bb-0a812c391cda/issues/CC3E4FAD3483591EAB05ACB4940DC6F5?branchId=b62d4097-a954-474a-95c0-085b6b0c9a1a&filter=issueType%3Alocalized-name%3DInsecure%20Link%20Target%26context%3AtoolType%3Dsast%26issueProperties%3Alocation%3Dapp%2Fviews%2Flogin.html)\n\nThe application uses an anchor tag whose `target` attribute is set to `_blank`, but the `rel` attribute is not set with the `noopener` value. The page opened from that target link may have the access to the `location` object of the original page through `window.opener.location`. A malicious page associated with this link will be able to navigate the original page to an arbitrary site, such as a phishing site, and thus, execute a reverse tabnabbing attack.\nNote that most contemporary browsers add the `noopener` value to the `rel` automatically by default. Thus, only users with older versions of browsers are targets for this phishing attack."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "app/views/login.html"
                                },
                                "region": {
                                    "startLine": 46
                                }
                            }
                        }
                    ],
                    "ruleId": "sigma.reverse_tabnabbing:html|html",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "056d96efbec4bfc318d8aba4215ae703a85ba0740d7f79d68e193558f57c4ad5"
                    }
                },
                {
                    "message": {
                        "text": "[\\[See in Polaris\\]](https://pim.dev.polaris.blackduck.com/portfolio/portfolios/c8003202-7753-40f9-9125-7a4fb82fa1cb/portfolio-items/7c83cf52-32e1-4e9c-9421-4841b947fb55/projects/ca44c961-5c06-4254-a5bb-0a812c391cda/issues/63C7C5ADA271730DDCD875084B419967?branchId=b62d4097-a954-474a-95c0-085b6b0c9a1a&filter=issueType%3Alocalized-name%3DExposure%20of%20Resource%20to%20Wrong%20Sphere%26context%3AtoolType%3Dsast%26issueProperties%3Alocation%3Dserver.js)\n\nThe `client-sessions`, `cookie-session` or `express-session` library sets the `path` attribute on the session cookie to the root or doesn't set `path` attribute (default value is root). If the application is hosted beneath a subdirectory and the cookie is copied to the root, then applications in other subdirectories will have access to this cookie. If any of these applications become compromised, the cookie of the victim site can be stolen from this application."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "server.js"
                                },
                                "region": {
                                    "startLine": 78
                                }
                            }
                        }
                    ],
                    "ruleId": "sigma.root_path_attribute_cookie:express|javascript",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "46dfd0209fc9d4d0a75308c9c8d25bb7175f2deba35d9665eca00e0635be426f"
                    }
                },
                {
                    "message": {
                        "text": "[\\[See in Polaris\\]](https://pim.dev.polaris.blackduck.com/portfolio/portfolios/c8003202-7753-40f9-9125-7a4fb82fa1cb/portfolio-items/7c83cf52-32e1-4e9c-9421-4841b947fb55/projects/ca44c961-5c06-4254-a5bb-0a812c391cda/issues/51AAEB092B6715E58B1C1AA32BA1BDCC?branchId=b62d4097-a954-474a-95c0-085b6b0c9a1a&filter=issueType%3Alocalized-name%3DUse%20of%20Potentially%20Dangerous%20Function%26context%3AtoolType%3Dsast%26issueProperties%3Alocation%3Dapp%2Froutes%2Fcontributions.js)\n\nThe application uses an unsafe evaluation method. If attacker-controlled code reaches this method, it may lead to remote code execution, code injection, or a cross-site scripting vulnerability."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "app/routes/contributions.js"
                                },
                                "region": {
                                    "startLine": 34
                                }
                            }
                        }
                    ],
                    "ruleId": "sigma.unsafe_eval:core_javascript|javascript",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "8e06fa1e7531b7418b39aeb22674ec34780e287e3db96ae5a9288fcd5f4477cc"
                    }
                },
                {
                    "message": {
                        "text": "[\\[See in Polaris\\]](https://pim.dev.polaris.blackduck.com/portfolio/portfolios/c8003202-7753-40f9-9125-7a4fb82fa1cb/portfolio-items/7c83cf52-32e1-4e9c-9421-4841b947fb55/projects/ca44c961-5c06-4254-a5bb-0a812c391cda/issues/813C342913CF71D939B5517B5689DEF2?branchId=b62d4097-a954-474a-95c0-085b6b0c9a1a&filter=issueType%3Alocalized-name%3DInsecure%20Storage%20of%20Sensitive%20Information%26context%3AtoolType%3Dsast%26issueProperties%3Alocation%3Dserver.js)\n\nThe session storage that the `express-session` module provides explicitly or by default is insecure. This type of memory storage leaks memory under most conditions. An attacker may create numerous active sessions and cause a Denial-of-Service situation."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "server.js"
                                },
                                "region": {
                                    "startLine": 78
                                }
                            }
                        }
                    ],
                    "ruleId": "sigma.unsafe_session_storage:express_session|javascript",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "bdf94b33a585defc5296a1125f5479629e3e9d676da5a4ec6ff6158adc219fb9"
                    }
                },
                {
                    "message": {
                        "text": "[\\[See in Polaris\\]](https://pim.dev.polaris.blackduck.com/portfolio/portfolios/c8003202-7753-40f9-9125-7a4fb82fa1cb/portfolio-items/7c83cf52-32e1-4e9c-9421-4841b947fb55/projects/ca44c961-5c06-4254-a5bb-0a812c391cda/issues/5E1E714AC4A6BD8CDD6C095E4DB79E48?branchId=b62d4097-a954-474a-95c0-085b6b0c9a1a&filter=issueType%3Alocalized-name%3DInsertion%20of%20Sensitive%20Information%20Into%20Sent%20Data%26context%3AtoolType%3Dsast%26issueProperties%3Alocation%3Dserver.js)\n\nHTTP responses contain an `X-Powered-By` header that reveals information about the server which helps attackers exploit known vulnerabilities or craft more targeted exploits."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "server.js"
                                },
                                "region": {
                                    "startLine": 15
                                }
                            }
                        }
                    ],
                    "ruleId": "sigma.verbose_server_banner:express|javascript",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "a922b3e66482ec590a0249fe7e859ab9113a44cea5d39dba201e56f5a51f21c1"
                    }
                }
            ]
        }
    ],
    "version": "2.1.0"
}